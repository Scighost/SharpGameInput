<#@ template hostspecific="false" language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;

#nullable enable

<#
HashSet<string> interfaceTypes = new()
{
    "IGameInput",
    "IGameInputReading",
    "IGameInputDevice",
    "IGameInputDispatcher",
    "IGameInputForceFeedbackEffect",
    "IGameInputRawDeviceReport",
};

const int TypeMarker_In = 0x01;
const int TypeMarker_Out = 0x02;
const int TypeMarker_Nullable = 0x04;

const int IUnknownMethodCount = 3;
int methodIndex = 0;

void DefineInterface(string name, Action makeMethods)
{
#>
    public sealed unsafe partial class <#= name #> : SafeHandle
    {
        public override bool IsInvalid => handle == IntPtr.Zero;

        internal <#= name #>(IntPtr handle, bool ownsHandle)
            : base(IntPtr.Zero, ownsHandle)
        {
            SetHandle(handle);
        }

        protected override bool ReleaseHandle()
        {
            return Marshal.Release(handle) >= 0;
        }
<#
    methodIndex = 0;
    makeMethods();
#>
    }
<#
}

void ForwardMethod(string returnType, string name, params (string type, string name)[] parameters)
{
    (string stripped, int flags) GetTypeModifiers(string type)
    {
        int flags = 0;

        if (type.StartsWith("in "))
        {
            flags |= TypeMarker_In;
            type = type[3..];
        }
        else if (type.StartsWith("out "))
        {
            flags |= TypeMarker_Out;
            type = type[4..];
        }

        if (type.EndsWith("?"))
        {
            flags |= TypeMarker_Nullable;
            type = type[..^1];
        }

        return (type, flags);
    }

    bool isVoid = returnType == "void";
#>

<#
    // Make the generated code look a little nicer if there's no parameters
    if (parameters.Length > 0)
    {
#>
        public <#= returnType #> <#= name #>(
            <#= string.Join(",\n            ", parameters.Select((p) => $"{p.type} {p.name}")) #>
        )
<#
    }
    else
    {
#>
        public <#= returnType #> <#= name #>()
<#
    }

    var fnPtrParams = parameters.Select((p) =>
    {
        var (type, flags) = GetTypeModifiers(p.type);

        if (interfaceTypes.Contains(type))
            type = "IntPtr";

        if ((flags & TypeMarker_In) != 0)
            type = "in " + type;
        else if ((flags & TypeMarker_Out) != 0)
            type = "out " + type;

        return type;
    }).Prepend("IntPtr").Append(returnType);

    var fnCallParams = parameters.Select((p) =>
    {
        string argument = p.name;
        var (type, flags) = GetTypeModifiers(p.type);

        if (interfaceTypes.Contains(type))
        {
            if ((flags & TypeMarker_Out) != 0)
                argument = $"IntPtr {p.name}_handle";
            else if ((flags & TypeMarker_Nullable) != 0)
                argument = $"{p.name}?.DangerousGetHandle() ?? IntPtr.Zero";
            else
                argument = $"{p.name}.DangerousGetHandle()";
        }

        if ((flags & TypeMarker_In) != 0)
            argument = "in " + argument;
        else if ((flags & TypeMarker_Out) != 0)
            argument = "out " + argument;

        return argument;
    }).Prepend("thisPtr");

    string fnPtrType = $"delegate* unmanaged[Stdcall]<{string.Join(", ", fnPtrParams)}>";
#>
        {
            ThrowHelper.CheckHandle(this);
<#
    foreach (var parameter in parameters)
    {
        var (type, flags) = GetTypeModifiers(parameter.type);
        if ((flags & (TypeMarker_Out | TypeMarker_Nullable)) != 0)
            continue;

        if (interfaceTypes.Contains(type))
        {
#>
            ThrowHelper.CheckHandle(<#= parameter.name #>);
<#
        }
    }
#>

            var thisPtr = handle;
            var vtable = *(void***)thisPtr;
            var fnPtr = (<#= fnPtrType #>)vtable[<#= IUnknownMethodCount + methodIndex++ #>];

            <#= !isVoid ? "var result = " : "" #>fnPtr(
                <#= string.Join(",\n                ", fnCallParams) #>
            );

<#
    foreach (var parameter in parameters)
    {
        var (type, flags) = GetTypeModifiers(parameter.type);
        if (interfaceTypes.Contains(type))
        {
            if ((flags & TypeMarker_Out) != 0)
            {
#>
            <#= parameter.name #> = new(<#= parameter.name #>_handle, ownsHandle: true);
<#
            }
        }
    }

    if (!isVoid)
    {
#>
            return result;
<#
    }
#>
        }
<#
}
#>
namespace SharpGameInput
{
<#
    DefineInterface("IGameInput", () =>
    {
        ForwardMethod("ulong", "GetCurrentTimestamp");

        ForwardMethod("int", "GetCurrentReading", 
            ("GameInputKind", "inputKind"),
            ("IGameInputDevice?", "device"),
            ("out IGameInputReading", "reading")
        );
        ForwardMethod("int", "GetNextReading", 
            ("IGameInputReading", "referenceReading"),
            ("GameInputKind", "inputKind"),
            ("IGameInputDevice?", "device"),
            ("out IGameInputReading", "reading")
        );
        ForwardMethod("int", "GetPreviousReading",
            ("IGameInputReading", "referenceReading"),
            ("GameInputKind", "inputKind"),
            ("IGameInputDevice?", "device"),
            ("out IGameInputReading", "reading")
        );
        ForwardMethod("int", "GetTemporalReading",
            ("ulong", "timestamp"),
            ("IGameInputDevice", "device"),
            ("out IGameInputReading", "reading")
        );

        ForwardMethod("int", "RegisterReadingCallback",
            ("IGameInputDevice?", "device"),
            ("GameInputKind", "inputKind"),
            ("float", "analogThreshold"),
            ("void*", "context"),
            ("delegate* unmanaged[Stdcall]<ulong, void*, IntPtr, bool, void>",
                "callbackFunc"),
            ("out ulong", "callbackToken")
        );
        ForwardMethod("int", "RegisterDeviceCallback",
            ("IGameInputDevice?", "device"),
            ("GameInputKind", "inputKind"),
            ("GameInputDeviceStatus", "statusFilter"),
            ("GameInputEnumerationKind", "enumerationKind"),
            ("void*", "context"),
            ("delegate* unmanaged[Stdcall]<ulong, void*, IntPtr, ulong, GameInputDeviceStatus, GameInputDeviceStatus, void>",
                "callbackFunc"),
            ("out ulong", "callbackToken")
        );
        ForwardMethod("int", "RegisterGuideButtonCallback",
            ("IGameInputDevice?", "device"),
            ("void*", "context"),
            ("delegate* unmanaged[Stdcall]<ulong, void*, IntPtr, ulong, bool, void>",
                "callbackFunc"),
            ("out ulong", "callbackToken")
        );
        ForwardMethod("int", "RegisterKeyboardLayoutCallback",
            ("IGameInputDevice?", "device"),
            ("void*", "context"),
            ("delegate* unmanaged[Stdcall]<ulong, void*, IntPtr, ulong, uint, uint, void>",
                "callbackFunc"),
            ("out ulong", "callbackToken")
        );
        ForwardMethod("void", "StopCallback",
            ("ulong", "callbackToken")
        );
        ForwardMethod("bool", "UnregisterCallback",
            ("ulong", "callbackToken"),
            ("ulong", "timeoutInMicroseconds")
        );

        ForwardMethod("int", "CreateDispatcher",
            ("out IGameInputDispatcher", "dispatcher")
        );
        ForwardMethod("int", "CreateAggregateDevice",
            ("GameInputKind", "inputKind"),
            ("out IGameInputDevice", "device")
        );

        ForwardMethod("int", "FindDeviceFromId",
            ("in APP_LOCAL_DEVICE_ID", "value"),
            ("out IGameInputDevice", "device")
        );
        ForwardMethod("int", "FindDeviceFromObject",
            ("nint", "value"),
            ("out IGameInputDevice", "device")
        );
        ForwardMethod("int", "FindDeviceFromPlatformHandle",
            ("void*", "value"),
            ("out IGameInputDevice", "device")
        );
        ForwardMethod("int", "FindDeviceFromPlatformString",
            ("char*", "value"),
            ("out IGameInputDevice", "device")
        );
        ForwardMethod("int", "EnableOemDeviceSupport",
            ("ushort", "vendorId"),
            ("ushort", "productId"),
            ("byte", "interfaceNumber"),
            ("byte", "collectionNumber")
        );

        ForwardMethod("void", "SetFocusPolicy",
            ("GameInputFocusPolicy", "policy")
        );
    });
#>

<#
    DefineInterface("IGameInputReading", () =>
    {
        ForwardMethod("GameInputKind", "GetInputKind");
        ForwardMethod("ulong", "GetSequenceNumber",
            ("GameInputKind", "inputKind")
        );
        ForwardMethod("ulong", "GetTimestamp");
        ForwardMethod("void", "GetDevice",
            ("out IGameInputDevice", "device")
        );
        ForwardMethod("bool", "GetRawReport",
            ("out IGameInputRawDeviceReport", "report")
        );

        ForwardMethod("uint", "GetControllerAxisCount");
        ForwardMethod("uint", "GetControllerAxisState",
            ("uint", "stateArrayCount"),
            ("float*", "stateArray")
        );

        ForwardMethod("uint", "GetControllerButtonCount");
        ForwardMethod("uint", "GetControllerButtonState",
            ("uint", "stateArrayCount"),
            ("bool*", "stateArray")
        );

        ForwardMethod("uint", "GetControllerSwitchCount");
        ForwardMethod("uint", "GetControllerSwitchState",
            ("uint", "stateArrayCount"),
            ("GameInputSwitchPosition*", "stateArray")
        );

        ForwardMethod("uint", "GetKeyCount");
        ForwardMethod("uint", "GetKeyState",
            ("uint", "stateArrayCount"),
            ("GameInputKeyState*", "stateArray")
        );

        ForwardMethod("bool", "GetMouseState",
            ("out GameInputMouseState", "state")
        );

        ForwardMethod("uint", "GetTouchCount");
        ForwardMethod("uint", "GetTouchState",
            ("uint", "stateArrayCount"),
            ("GameInputTouchState*", "stateArray")
        );

        ForwardMethod("bool", "GetMotionState",
            ("out GameInputMotionState", "state")
        );

        ForwardMethod("bool", "GetArcadeStickState",
            ("out GameInputArcadeStickState", "state")
        );

        ForwardMethod("bool", "GetFlightStickState",
            ("out GameInputFlightStickState", "state")
        );

        ForwardMethod("bool", "GetGamepadState",
            ("out GameInputGamepadState", "state")
        );

        ForwardMethod("bool", "GetRacingWheelState",
            ("out GameInputRacingWheelState", "state")
        );

        ForwardMethod("bool", "GetUiNavigationState",
            ("out GameInputUiNavigationState", "state")
        );
    });
#>

<#
    DefineInterface("IGameInputDevice", () =>
    {
        ForwardMethod("GameInputDeviceInfo*", "GetDeviceInfo");
        ForwardMethod("GameInputDeviceStatus", "GetDeviceStatus");
        ForwardMethod("void", "GetBatteryState",
            ("out GameInputBatteryState", "state")
        );

        ForwardMethod("int", "CreateForceFeedbackEffect",
            ("uint", "motorIndex"),
            ("in GameInputForceFeedbackParams", "ffbParams"),
            ("out IGameInputForceFeedbackEffect", "effect")
        );

        ForwardMethod("bool", "IsForceFeedbackMotorPoweredOn",
            ("uint", "motorIndex")
        );

        ForwardMethod("void", "SetForceFeedbackMotorGain",
            ("uint", "motorIndex"),
            ("float", "masterGain")
        );
        ForwardMethod("int", "SetHapticMotorState",
            ("uint", "motorIndex"),
            ("in GameInputHapticFeedbackParams", "hapticParams")
        );
        ForwardMethod("void", "SetRumbleState",
            ("in GameInputRumbleParams", "rumbleParams")
        );

        ForwardMethod("void", "SetInputSynchronizationState",
            ("bool", "enabled")
        );
        ForwardMethod("void", "SendInputSynchronizationHint");

        ForwardMethod("void", "PowerOff");

        ForwardMethod("int", "CreateRawDeviceReport",
            ("uint", "reportId"),
            ("GameInputRawDeviceReportKind", "reportKind"),
            ("out IGameInputRawDeviceReport", "report")
        );
        ForwardMethod("int", "GetRawDeviceFeature",
            ("uint", "reportId"),
            ("out IGameInputRawDeviceReport", "report")
        );
        ForwardMethod("int", "SetRawDeviceFeature",
            ("IGameInputRawDeviceReport", "report")
        );
        ForwardMethod("int", "SendRawDeviceOutput",
            ("IGameInputRawDeviceReport", "report")
        );
        ForwardMethod("int", "SendRawDeviceOutputWithResponse",
            ("IGameInputRawDeviceReport", "requestReport"),
            ("out IGameInputRawDeviceReport", "responseReport")
        );

        ForwardMethod("int", "ExecuteRawDeviceIoControl",
            ("uint", "controlCode"),
            ("nuint", "inputBufferSize"),
            ("void*", "inputBuffer"),
            ("nuint", "outputBufferSize"),
            ("void*", "outputBuffer"),
            ("out nuint", "outputSize")
        );
        ForwardMethod("bool", "AcquireExclusiveRawDeviceAccess",
            ("ulong", "timeoutInMicroseconds")
        );
        ForwardMethod("void", "ReleaseExclusiveRawDeviceAccess");
    });
#>

<#
    DefineInterface("IGameInputDispatcher", () =>
    {
        ForwardMethod("bool", "Dispatch",
            ("ulong", "quotaInMicroseconds")
        );
        ForwardMethod("int", "OpenWaitHandle",
            ("out nint", "waitHandle")
        );
    });
#>

<#
    DefineInterface("IGameInputForceFeedbackEffect", () =>
    {
        ForwardMethod("void", "GetDevice",
            ("out IGameInputDevice", "device")
        );

        ForwardMethod("uint", "GetMotorIndex");

        ForwardMethod("float", "GetGain");
        ForwardMethod("void", "SetGain",
            ("float", "gain")
        );

        ForwardMethod("void", "GetParams",
            ("out GameInputForceFeedbackParams", "ffbParams")
        );
        ForwardMethod("bool", "SetParams",
            ("in GameInputForceFeedbackParams", "ffbParams")
        );

        ForwardMethod("GameInputFeedbackEffectState", "GetState");
        ForwardMethod("void", "SetState",
            ("GameInputFeedbackEffectState", "state")
        );
    });
#>

<#
    DefineInterface("IGameInputRawDeviceReport", () =>
    {
        ForwardMethod("void", "GetDevice",
            ("out IGameInputDevice", "device")
        );

        ForwardMethod("GameInputRawDeviceReportInfo*", "GetReportInfo");

        ForwardMethod("nuint", "GetRawDataSize");
        ForwardMethod("nuint", "GetRawData",
            ("nuint", "bufferSize"),
            ("void*", "buffer")
        );
        ForwardMethod("bool", "SetRawData",
            ("nuint", "bufferSize"),
            ("void*", "buffer")
        );

        ForwardMethod("bool", "GetItemValue",
            ("uint", "itemIndex"),
            ("out long", "value")
        );
        ForwardMethod("bool", "SetItemValue",
            ("uint", "itemIndex"),
            ("long", "value")
        );

        ForwardMethod("bool", "ResetItemValue",
            ("uint", "itemIndex")
        );
        ForwardMethod("bool", "ResetAllItems");
    });
#>
}